diff --git a/modules/file/file.module b/modules/file/file.module
index ae452a6..a4a7f03 100644
--- a/modules/file/file.module
+++ b/modules/file/file.module
@@ -357,10 +357,6 @@ function file_file_delete($file) {
  * support for a default value.
  */
 function file_managed_file_process($element, &$form_state, $form) {
-  // Append the '-upload' to the #id so the field label's 'for' attribute
-  // corresponds with the file element.
-  $original_id = $element['#id'];
-  $element['#id'] .= '-upload';
   $fid = isset($element['#value']['fid']) ? $element['#value']['fid'] : 0;
 
   // Set some default element properties.
@@ -370,7 +366,7 @@ function file_managed_file_process($element, &$form_state, $form) {
 
   $ajax_settings = array(
     'path' => 'file/ajax/' . implode('/', $element['#array_parents']) . '/' . $form['form_build_id']['#value'],
-    'wrapper' => $original_id . '-ajax-wrapper',
+    'wrapper' => $element['#id'] . '-ajax-wrapper',
     'effect' => 'fade',
     'progress' => array(
       'type' => $element['#progress_indicator'],
@@ -465,13 +461,13 @@ function file_managed_file_process($element, &$form_state, $form) {
     $element['upload']['#attached']['js'] = array(
       array(
         'type' => 'setting',
-        'data' => array('file' => array('elements' => array('#' . $element['#id'] => $extension_list)))
+        'data' => array('file' => array('elements' => array('#' . $element['#id'] . '-upload' => $extension_list)))
       )
     );
   }
 
   // Prefix and suffix used for Ajax replacement.
-  $element['#prefix'] = '<div id="' . $original_id . '-ajax-wrapper">';
+  $element['#prefix'] = '<div id="' . $element['#id'] . '-ajax-wrapper">';
   $element['#suffix'] = '</div>';
 
   return $element;
@@ -519,17 +515,7 @@ function file_managed_file_value(&$element, $input = FALSE, $form_state = NULL)
       // public file) to confirm it exists and that the current user has access
       // to it.
       if (isset($input['fid']) && ($file = file_load($input['fid']))) {
-        // By default the public:// file scheme provided by Drupal core is the
-        // only one that allows files to be publicly accessible to everyone, so
-        // it is the only one for which the file access checks are bypassed.
-        // Other modules which provide publicly accessible streams of their own
-        // in hook_stream_wrappers() can add the corresponding scheme to the
-        // 'file_public_schema' variable to bypass file access checks for those
-        // as well. This should only be done for schemes that are completely
-        // publicly accessible, with no download restrictions; for security
-        // reasons all other schemes must go through the file_download_access()
-        // check.
-        if (in_array(file_uri_scheme($file->uri), variable_get('file_public_schema', array('public'))) || file_download_access($file->uri)) {
+        if (file_uri_scheme($file->uri) == 'public' || file_download_access($file->uri)) {
           $fid = $file->fid;
         }
         // If the current user doesn't have access, don't let the file be
