diff --git a/link.module b/link.module
index b94bf0e..866c661 100644
--- a/link.module
+++ b/link.module
@@ -16,6 +16,7 @@ define('LINK_TARGET_DEFAULT', 'default');
 define('LINK_TARGET_NEW_WINDOW', '_blank');
 define('LINK_TARGET_TOP', '_top');
 define('LINK_TARGET_USER', 'user');
+define('CURL_ENABLED', function_exists('curl_version'));
 
 /**
  * Maximum URLs length - needs to match value in link.install.
@@ -53,6 +54,7 @@ function link_field_info() {
           'url_cutoff' => 80,
         ),
         'validate_url' => 1,
+        'validate_url_with_curl' => CURL_ENABLED,
       ),
       'default_widget' => 'link_field',
       'default_formatter' => 'link_default',
@@ -71,13 +73,6 @@ function link_field_instance_settings_form($field, $instance) {
     '#element_validate' => array('link_field_settings_form_validate'),
   );
 
-  $form['validate_url'] = array(
-    '#type' => 'checkbox',
-    '#title' => t('Validate URL'),
-    '#default_value' => isset($instance['settings']['validate_url']) && ($instance['settings']['validate_url'] !== '') ? $instance['settings']['validate_url'] : TRUE,
-    '#description' => t('If checked, the URL field will be verified as a valid URL during validation.'),
-  );
-
   $form['url'] = array(
     '#type' => 'checkbox',
     '#title' => t('Optional URL'),
@@ -216,6 +211,39 @@ function link_field_instance_settings_form($field, $instance) {
     '#field_suffix' => '"',
     '#size' => 20,
   );
+
+  $form['validate_url'] = array(
+    '#type' => 'checkbox',
+    '#title' => t('Validate URL'),
+    '#default_value' => isset($instance['settings']['validate_url']) && ($instance['settings']['validate_url'] !== '') ? $instance['settings']['validate_url'] : TRUE,
+    '#description' => t('If checked, the URL syntax will be verified.'),
+  );
+
+  $cURLDescription = 'If checked, a successful <a href="http://www.php.net/manual/en/book.curl.php">cURL</a> response will be required to pass validation.';
+
+  $defaultcURLValue = isset($instance['settings']['validate_url_with_curl']) && ($instance['settings']['validate_url_with_curl'] !== '') ? $instance['settings']['validate_url_with_curl'] : FALSE;
+
+  if (!CURL_ENABLED) {
+    $cURLDescription = 'Please enable <a href="http://www.php.net/manual/en/book.curl.php">cURL</a> on the server to implement this feature.';
+    $defaultcURLValue = FALSE;  
+  }
+
+  $form['validate_url_with_curl'] = array(
+    '#disabled' => !CURL_ENABLED,
+    '#type' => 'checkbox',
+    '#title' => t('Additionally validate URL with cURL'),
+    '#default_value' => $defaultcURLValue,
+    '#description' => t($cURLDescription),
+    // toggle the curl option if validating URL syntax
+    '#states' => array(
+      'visible' => array(
+       '#edit-instance-settings-validate-url' => array(
+        'checked' => TRUE
+        ),
+      ),
+    )
+  );
+
   return $form;
 }
 
@@ -393,13 +421,27 @@ function _link_process(&$item, $delta = 0, $field, $entity) {
 function _link_validate(&$item, $delta, $field, $entity, $instance, $langcode, &$optional_field_found, &$errors) {
   if ($item['url'] && !(isset($instance['default_value'][$delta]['url']) && $item['url'] === $instance['default_value'][$delta]['url'] && !$instance['required'])) {
     // Validate the link.
-    if (link_validate_url(trim($item['url'])) == FALSE) {
+    if (link_validate_url(trim($item['url'])) == FALSE) {      
       $errors[$field['field_name']][$langcode][$delta][] = array(
         'error' => 'link_required',
         'message' => t('The value provided for %field is not a valid URL.', array('%field' => $instance['label'])),
         'error_element' => array('url' => TRUE, 'title' => FALSE),
       );
+    } else if ($instance['settings']['validate_url_with_curl'] !== 0 || is_null($instance['settings']['validate_url_with_curl']) || !isset($instance['settings']['validate_url_with_curl'])) {
+        // URL syntax passed validation, now try cURL
+        if (CURL_ENABLED) {
+          if (link_validate_url_with_curl(trim($item['url'])) == FALSE) {
+            $errors[$field['field_name']][$langcode][$delta][] = array(
+              'error' => 'link_required',
+              'message' => t('cURL request to %field failed.', array('%field' => $instance['label'])),
+              'error_element' => array('url' => TRUE, 'title' => FALSE),
+            );
+          }  
+        } else {
+          drupal_set_message(t('cURL is not available on this system, bypassing cURL validation for %field.', array('%field' => $instance['label'])), 'warning');
+        }
     }
+
     // Require a title for the link if necessary.
     if ($instance['settings']['title'] == 'required' && strlen(trim($item['title'])) == 0) {
       $errors[$field['field_name']][$langcode][$delta][] = array(
@@ -1151,6 +1193,39 @@ function link_cleanup_url($url, $protocol = 'http') {
 }
 
 /**
+ * Validates a URL with cURL.
+ *
+ * @param string $url
+ * 
+ * @return boolean
+ *   Returns boolean FALSE if the URL is not valid or if cURL is not enabled.
+ */
+function link_validate_url_with_curl($url) {
+  if (!CURL_ENABLED) return false;
+
+  global $base_url;
+  $type = link_validate_url($url);
+  
+  if ($type == LINK_INTERNAL) {
+    $url = $base_url . '/' . $url;
+  } else if ($type == LINK_FRONT) {
+    $url = $base_url;
+  }
+
+  $ch = curl_init($url);  
+  curl_setopt($ch, CURLOPT_TIMEOUT, 10);  
+  curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);  
+  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
+  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
+  curl_setopt($ch, CURLOPT_MAXREDIRS, 10);  
+  $data = curl_exec($ch);  
+  $httpcode = curl_getinfo($ch, CURLINFO_HTTP_CODE);  
+  curl_close($ch);
+  
+  return ($httpcode >= 200 && $httpcode <= 302);  
+}
+
+/**
  * Validates a URL.
  * 
  * Accepts all URLs following RFC 1738 standard for URL formation and all e-mail
@@ -1294,7 +1369,7 @@ function link_content_migrate_field_alter(&$field_value, $instance_value) {
     // Adjust the field type.
     $field_value['type'] = 'link_field';
     // Remove settings that are now on the instance.
-    foreach (array('attributes', 'display', 'url', 'title', 'title_value', 'enable_tokens', 'validate_url') as $setting) {
+    foreach (array('attributes', 'display', 'url', 'title', 'title_value', 'enable_tokens', 'validate_url', 'validate_url_with_curl') as $setting) {
       unset($field_value['settings'][$setting]);
     }
   }
@@ -1308,7 +1383,7 @@ function link_content_migrate_field_alter(&$field_value, $instance_value) {
 function link_content_migrate_instance_alter(&$instance_value, $field_value) {
   if ($field_value['type'] == 'link') {
     // Grab settings that were previously on the field.
-    foreach (array('attributes', 'display', 'url', 'title', 'title_value', 'enable_tokens', 'validate_url') as $setting) {
+    foreach (array('attributes', 'display', 'url', 'title', 'title_value', 'enable_tokens', 'validate_url', 'validate_url_with_curl') as $setting) {
       if (isset($field_value['settings'][$setting])) {
         $instance_value['settings'][$setting] = $field_value['settings'][$setting];
       }
