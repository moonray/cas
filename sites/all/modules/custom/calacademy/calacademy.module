<?php

/**
 * Provide node tpl suggestions for the Services Teaser view mode
 * @author grotter
 *
 */
function calacademy_preprocess_field(&$vars) {
  if ($vars['element']['#view_mode'] != 'view_simulator') return;
  $vars['theme_hook_suggestions'][] = 'field__view_simulator__hero_region';
}

/**
 * Convert a string of terms to a array usuable by Views as WHERE conditions.
 * @author Rob Davidson
 *
 * @param $term_list: An array of taxonomy terms.
 *
 * @return An array of term ids usable as query conditions.
 */
define("CAS_LOGICAL_OPERATOR_AND", "+");
define("CAS_LOGICAL_OPERATOR_OR", ",");

function _entityref_ids_from_names($itemList, $refType, $operator = CAS_LOGICAL_OPERATOR_OR) {
  // Break the tag string up into a workable array.
  $argArray = array();
  // but let's not explode itemList into array elements if the reftype
  // is nid since the value may be a node title that includes commas.
  if ($refType != 'nid') {
    $argArray = explode(', ', $itemList);
  } else {
    $argArray[] = $itemList;
  }
  
  // Declare the term id array
  $argIdArray = array();
  // Loop through the argument array and gather entity id's.
  foreach ($argArray as $delta => $arg) {
    // Get the correct entity id for the supplied entity argument.
    switch ($refType) {

      case 'tid':
        $entityID = _get_tid_from_term($arg);
        break;

      case 'field_tags_tid':
        //there is a problem if a term exists in more than one vocabulary, so we're assuming 'field_tags_tid' will always use the tags 'vocabulary'
        $vocabulary = 'tags';
        $entityID = _get_tid_from_term($arg, $vocabulary);
        break;

      case 'nid':
        $entityID = _get_nid_from_title($arg);
        break;

//      case 'uid':
//        die(_expose_obj($arg, '$arg:34'));
//        $entityID = _get_uid_from_name($arg);
//        break;

      case 'field_file_reference_target_id':
        $entityID = _get_fid_from_file($arg);
        break;

      case 'field_vocabulary_reference_target_id':
        $entityID = _get_vid_from_vocab_name($arg);
        break;
    }
    // If there is an entity id then add it to the argument id array.
    if (isset($entityID)) {
      $argIdArray[] = $entityID;
    }
  }
  // Reassemble the argument array.
  $argList = implode($operator, $argIdArray);
  // If the argument list doesnt exist then return an error.
  if ($argList == '') {
    $argList = $itemList;
  }
  return $argList;
}

/**
 * Expose an object to html
 *
 * @author Rob Davidson
 *
 * @param $obj: The object to expose.
 * @param $label: An optional label for the exposed object.
 *
 * @return An exposed object or array wrapped inside a <pre> element for formatting.
 */
function _expose_obj($obj, $label = '') {
  return '<pre>' . $label . ' => ' . print_r($obj, true) . '</pre>';
}

/**
 *
 * @param type $file_name
 */
function _get_nid_from_title($node_title) {
  $query = new EntityFieldQuery();
  // Build the query then execute and store the result in $entities
  $entities = $query->entityCondition('entity_type', 'node')
//    ->propertyCondition('type', 'my_type')
    ->propertyCondition('title', $node_title)
    ->propertyCondition('status', 1)
    ->range(0, 1)
    ->execute();
  // If the result contains node information then return the nodes nid value.
  if (!empty($entities['node'])) {
    $node = node_load(array_shift(array_keys($entities['node'])));
    return $node->nid;
  }

  return NULL;
}

/**
 * Get a terms id by term name and vocabulary
 * @author Rob Davidson
 *
 * @param $term_name
 * @param $vocabulary
 * @return integer
 */
function _get_tid_from_term($term_name, $vocabulary = NULL) {
  // Get the term object.

  $term = taxonomy_get_term_by_name($term_name, $vocabulary);

  //$vocabulary = 'tags';
  // Push the objects values to the object root.
  $term = current(array_values($term));
  // If there is a term id return it otherwise return flase
  if (isset($term->tid)) {
    return $term->tid;
  }
  else {
    return NULL;
  }
}

/**
 * Helper function to handle the output for the Hero Media field.
 * @author Rob Davidson <rob@custommojo.com>
 *
 * @param type $field_collection
 */
function _hero_media_thumbnail_output($heroRegion, $originalOutput) {
  // Set the default output to be the orignal output supplied by the theme.
  $output = $originalOutput;

  if (!isset($heroRegion['field_hero_type'][0]['#markup']))
  {
    if (isset($heroRegion['entity']['field_collection_item']) && is_array($heroRegion['entity']['field_collection_item']))
    {
      $arr = array_values($heroRegion['entity']['field_collection_item']);
      $heroRegion = $arr[0];
    }
    else
    {
      return $output;
    }
  }
  // Alter the thumbnail output based on the selected type of Hero Media.
  switch ($heroRegion['field_hero_type'][0]['#markup'])
  {
    case 'slideshow-standard':
      $slideshowID = $heroRegion['field_hero_slideshow'][0]['#markup'];
      $output = views_embed_view('hero_media', 'standard_slideshow_thumbnail', $slideshowID);
      break;

    case 'slideshow-large':
      $slideshowID = $heroRegion['field_hero_slideshow_large'][0]['#markup'];
      $output = views_embed_view('hero_media', 'large_slideshow_thumbnail', $slideshowID);

      break;
    case 'video-youtube':
      // The video has a curated poster image so ignore the YouTube thumbnail.
      if (isset($heroRegion['field_poster_image'])) {
        $output = render($heroRegion['field_poster_image']);
      }

      if (!empty($output)) {
        $output = '<div class="video">' . $output . '</div>';
      }

      break;

    default:
  }
  $output = str_replace('square_900px/', 'square_460px/', $output);
  return $output;
}

/**
 * Used below
 * @author grotter
 */
function _get_token_uri_from_view($viewDisplay, $id) {
  $viewResult = views_get_view_result('hero_media', $viewDisplay, $id);

  if (empty($viewResult) || !is_array($viewResult)) return false;

  // parse the results
  if (!isset($viewResult[0]->field_field_slideshow_frame_bg_image)) return false;
  $img = $viewResult[0]->field_field_slideshow_frame_bg_image;

  if (!isset($img[0]['raw']['uri'])) return false;

  return $img[0]['raw']['uri'];
}

/**
 * Derive an image URI for use in the token system
 * @author grotter
 */
function _hero_media_token_image_uri($fieldData) {
  if (!isset($fieldData->field_hero_type['und'][0]['value'])) return false;

  $type = $fieldData->field_hero_type['und'][0]['value'];

  switch ($type) {
    case 'image-standard':

      if (isset($fieldData->field_image_primary['und'][0]['uri'])) {
        return $fieldData->field_image_primary['und'][0]['uri'];
      }

      break;
    case 'image-large':

      if (isset($fieldData->field_image_primary_large['und'][0]['uri'])) {
        return $fieldData->field_image_primary_large['und'][0]['uri'];
      }

      break;
    case 'slideshow-standard':

      if (isset($fieldData->field_hero_slideshow['und'][0]['target_id'])) {
        return _get_token_uri_from_view(
          'standard_slideshow_token',
          $fieldData->field_hero_slideshow['und'][0]['target_id']
        );
      }

      break;
    case 'slideshow-large':

      if (isset($fieldData->field_hero_slideshow_large['und'][0]['target_id'])) {
        return _get_token_uri_from_view(
          'large_slideshow_token',
          $fieldData->field_hero_slideshow_large['und'][0]['target_id']
        );
      }

      break;
    case 'video-youtube';

      if (isset($fieldData->field_poster_image['und'][0]['uri'])) {
        return $fieldData->field_poster_image['und'][0]['uri'];
      } else if (isset($fieldData->field_youtube_video['und'][0]['video_id'])) {
        $files = variable_get('file_public_path', conf_path() . '/files');
        $path = $files . '/youtube/' . $fieldData->field_youtube_video['und'][0]['video_id'] . '.png';

        return $path;
      }

      break;
  }

  return false;
}

/**
 * Check to see if the passed parameter already exists as a node Title in the
 * database.
 *
 * @param $title: The title to test for.
 * @return bool If a result was found return TRUE else return FALSE.
 */
function _title_exists($title) {
  return db_query("SELECT nid FROM {node} WHERE title = \"" . $title . "\"")->fetchField();
}

/**
 * Implements hook_form_alter(&$form, &$form_state, $form_id)
 * @author Rob Davidson <rob@custommojo.com>
 *
 * @param $form: Nested array of form elements that comprise the form.
 * @param $form_state: A keyed array containing the current state of the form.
 *        The arguments that drupal_get_form() was originally called with are
 *        available in the array $form_state['build_info']['args'].
 * @param $form_id: String representing the name of the form itself. Typically
 *        this is the name of the function that generated the form.
 */
define('CALACADEMY_ES_THEME_TITLE_MAXLENGTH', 30);

function calacademy_form_alter(&$form, &$form_state, $form_id) {
  // Handle special processing for the Hero Region field collection.
  if ((substr($form_id, strlen($form_id) - 9) == 'node_form' || $form_id == 'user_profile_form')
      && isset($form['field_hero_region']))
  {
    // Add the JS/jQ required for the Hero media system.
    drupal_add_js(drupal_get_path('module', 'calacademy') . '/js/hero-region--hero-type-toggle.js', 'file');
    $form['#attached']['js'] = array(
      drupal_get_path('module', 'calacademy') . '/js/hero-region--hero-type-toggle.js' => array('type' => 'file'),
    );

    foreach ($form['field_hero_region'][LANGUAGE_NONE][0] as $key => $field)
    {
      if ((is_array($field) && substr($key, 0, 6) == 'field_') && $key != 'field_hero_type')
      {
        $form['field_hero_region'][LANGUAGE_NONE][0][$key]['#attributes']['class'][] = 'element-invisible';
      }
    }
  }

  // Handle specific forms by $form_id.
  switch ($form_id) {
    case 'es_theme_node_form':
      $form['title']['#maxlength'] = CALACADEMY_ES_THEME_TITLE_MAXLENGTH;
      $form['#validate'][] = '_calacademy_validate_es_theme_title';
      break;
    case 'person_node_form':
      drupal_add_js(drupal_get_path('module', 'calacademy') . '/js/person--additional-info-toggle.js', 'file');
      $form['#attached']['js'] = array(
        drupal_get_path('module', 'calacademy') . '/js/person--additional-info-toggle.js' => array('type' => 'file'),
      );
      break;
  }
}

function _calacademy_validate_es_theme_title($form, &$form_state) {
  if (strlen($form_state['values']['title']) > CALACADEMY_ES_THEME_TITLE_MAXLENGTH) {
    form_set_error('title', 'Title must be less than '. CALACADEMY_ES_THEME_TITLE_MAXLENGTH .' characters.');
  }
}

/**
 *This function is for the copying and pasting of long lists of text that have many static links to research papers pointing at the old research site
 *The function will replace the old path with the new one and also transliterate the file name to match it to the doc on the new site
 * @author Jay Mollica
 *
 * @param $field: the field of text that contains anchors with old research urls.
 *
 */

function _calacademy_research_url_migrate($field) {

  $item = 'a';
  $temp = htmlqp($field)->find('a')->each(function($index,$item) {

    // $item is a DOMElement
    $href = qp($item)->attr('href');
    $href = preg_replace('|http://research.calacademy.org/sites/research.calacademy.org/files/Departments|i', "http://www2.calacademy.org/sites/default/files/assets/ibss/departments", $href);

    //now we have to switch out the dept folder names on the old site for the new folder names...
    //here's an array to exchange the names
    $dept_dirs = array(
      '/om/' => '/ornithology-mammalogy/',
      '/ent/' => '/entomology/',
      '/anthro/' => '/anthropology/',
      '/aquatic/' => '/aquatic-biology/',
      '/ccg/' => '/center-for-comparative-genomics/',
      '/herp/' => '/herpetology/',
      '/izg/' => '/invertebrate-zoology-geology/'
    );

    //now let's switch them out
    foreach($dept_dirs AS $find => $replace) {
      $href = preg_replace("|$find|", $replace, $href);
    }

    //now let's explode on '/' and sort out the pieces to transliterate the file name
    $parts = preg_split('|/|', $href);
    $file_name = end($parts);
    $file_name = urldecode($file_name);
    $file_name = transliteration_clean_filename($file_name);
    array_pop($parts);
    array_push($parts, $file_name);
    $href = implode("/", $parts);

    $href = strtolower($href);

    qp($item)->attr('href',$href);

  });
  $field = $temp->top('body')->innerHTML();

  return $field;

}

/**
 * Implements hook_node_presave($node)
 *
 * Act on a node being inserted or updated.
 * This hook is invoked from node_save() before the node is saved to the database.
 *
 * @author Rob Davidson
 *
 * @param $node: The node that is being inserted or updated.
 *
 */
function calacademy_node_presave($node) {

  // Trim preceeding and trailing whitespace from the Title field.
  $node->title = trim($node->title);

  /**
   * If field_featured exists, have Drupal's "Promoted to front page" setting
   * mirror the "Flag this content as featured" setting.
   */
  if (property_exists($node, 'field_featured')) {

    // The field_featured property exists so work the Mojo.
    if ($node->promote != $node->field_featured[LANGUAGE_NONE][0]['value']) {
      $node->promote = $node->field_featured[LANGUAGE_NONE][0]['value'];
    }
  }

  // Handle presave by content type.
  switch ($node->type) {

    case 'ibss_project':

      if (property_exists($node, 'body')) {
        $body = $node->body['und'][0]['value'];

        $body = _calacademy_research_url_migrate($body);

        $node->body['und'][0]['value'] = $body;
      }
    break;
  }
}

/**
 * Implements hook_field_collection_item_presave(FieldCollectionItemEntity $field_collection_item)
 *
 * @param FieldCollectionItemEntity $field_collection_item
 *   The field collection item that is being inserted or updated.
 *
 * @note Saving this functionality for use in the standalone version.
 */
function calacademy_field_collection_item_presave(FieldCollectionItemEntity $field_collection_item) {
  switch ($field_collection_item->field_name)
  {
    case 'field_hero_region':
      $field_collection_item = _calacademy_node_presave_hero($field_collection_item, $field_collection_item->field_hero_type[LANGUAGE_NONE][0]['value']);
      break;
  }
}

/**
 * Helper function to clear unused hero fields.
 * @author Rob Davidson <rob@custommojo.com>
 * // It's not elegant but it works.
 *
 * @param $active_hero: The hero field to ignore when clearing field data.
 */
function _calacademy_node_presave_hero(&$field_collection_item, $active_hero) {
  // Clear Hero fields if they are not active.
  if ($active_hero != 'image-standard')
  {
    $field_collection_item->field_image_primary[LANGUAGE_NONE] = array();
  }
  if ($active_hero != 'image-large')
  {
    $field_collection_item->field_image_primary_large[LANGUAGE_NONE] = array();
  }
  if ($active_hero != 'slideshow-standard')
  {
    $field_collection_item->field_hero_slideshow[LANGUAGE_NONE] = array();
  }
  if ($active_hero != 'slideshow-large')
  {
    $field_collection_item->field_hero_slideshow_large[LANGUAGE_NONE] = array();
  }
  if ($active_hero != 'video-youtube')
  {
    $field_collection_item->field_youtube_video[LANGUAGE_NONE] = array();
    $field_collection_item->field_poster_image[LANGUAGE_NONE] = array();
  }
  return $field_collection_item;
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 * Set the '#wysiwyg'-attribute to false for the summary fields.
 */
function calacademy_field_widget_text_textarea_with_summary_form_alter(&$element, &$form_state, $context) {
  if (isset($element['summary']) && !isset($element['summary']['#wysiwyg'])) $element['summary']['#wysiwyg'] = false;
}

/**
 * Implements hook_node_validate($node, $form, &$form_state)
 * @author Rob Davidson
 *
 * @param $node: The node being validated.
 * @param $form: The form being used to edit the node.
 * @param $form_state: The form state array.
 */
function calacademy_node_validate($node, $form, &$form_state) {

  // TODO Remove this once the new Hero system is complete.
  // Ensure that the Primary Image field is actually required to submit content
  // containing that field.
  if (key_exists('field_image_primary', $form_state['complete form'])) {
    $fidValue = (isset($form_state['complete form']['field_image_primary'][LANGUAGE_NONE][0]['#value']['fid'])) ? $form_state['complete form']['field_image_primary'][LANGUAGE_NONE][0]['#value']['fid'] : NULL;
    if (!isset($fidValue) || $fidValue == 0) {
      form_set_error('field_image_primary', 'You must choose a Primary Image.');
    }
  }

  // TODO Review the unique title handling.
  /*
  if (_title_exists($title)) {
    form_set_error('title', t('The Title you have specified is already in use, you must provide a unique Title for this content.'));
  }
 */

  // Handle the validation of the Hero settings.
  calacademy_node_validate_hero($node, $form, $form_state);

}

/**
 * Helper function for validating the Hero settings.
 * @author Rob Davidson <rob@custommojo.com>
 */
function calacademy_node_validate_hero($node, $form, $form_state) {
  if (isset($node->field_hero_region))
  {
    switch($node->field_hero_region['und'][0]['field_hero_type']['und'][0]['value'])
    {
      case 'image-standard':
        if ($node->field_hero_region['und'][0]['field_image_primary']['und'][0]['fid'] == 0)
        {
          form_set_error('field_image_primary', t('The Standard Image selection requires an image.'));
        }
        break;

      case 'image-large':
        if ($node->field_hero_region['und'][0]['field_image_primary_large']['und'][0]['fid'] == 0)
        {
          form_set_error('field_image_primary_large', t('The Large Image selection requires an image.'));
        }
        break;

      case 'slideshow-standard':
        if ($node->field_hero_region['und'][0]['field_hero_slideshow']['und'][0]['target_id'] == '')
        {
          form_set_error('field_hero_slideshow', t('The Standard Slideshow selection requires a slideshow reference.'));
        }
        break;

      case 'slideshow-large':
        if ($node->field_hero_region['und'][0]['field_hero_slideshow_large']['und'][0]['target_id'] == '')
        {
          form_set_error('field_hero_slideshow_large', t('The Large Slideshow selection requires a slideshow reference.'));
        }
        break;
    }
  }
}

/**
 * Implements hook_views_pre_build(&$view)
 *
 * @param $view: The view to be processed.
 */
function calacademy_views_pre_build(&$view) {

  // Check for the existence of multiple value term arguments and convert them
  // to term ids.
  if (isset($view->name)) {
    // Only proceed if arguments are present.
    if (count($view->args) > 0) {
      // Loop through the available arguments and store indexes.
      $argIndex = 0;
      // Make sure we there are views args before we try to iterate.
      if (count($view->argument) > 0)
      {
        foreach ($view->argument as $key => $arg) {
          $refType = NULL;

          if (isset($view->args[$argIndex]) && !is_numeric($view->args[$argIndex])) {
            $view->args[$argIndex] = _entityref_ids_from_names($view->args[$argIndex], $key);
          }
          $argIndex ++;
        }
      }
    }

    // This is a cache response mechanism for pre query data for the
    // calacademy_services_views.module
    if ($view->name == "es_science_today_feeds") {
      if ($view->current_display == "science_today_trending_service") {
        // check Drupal Cache API for existing app data to mitigate Drupal query load
        // force clearing of existing cache item if it has expired
        if ($cache = cache_get('science_today_trending_app_data', 'cache')) {
          if ($cache->expire < REQUEST_TIME) {
            cache_clear_all('science_today_trending_app_data', 'cache', TRUE);
          }
        }
        if (cache_get('science_today_trending_app_data')) {
          // return Drupal Cache API data
          $cache = cache_get('science_today_trending_app_data');
          echo(str_replace('\\/', '/', json_encode($cache->data)));
          exit();
        }
      }
      else if ($view->current_display == "science_today_trending_service_video") {
        // check Drupal Cache API for existing app data to mitigate Drupal query load
        // force clearing of existing cache item if it has expired
        if ($cache = cache_get('science_today_trending_app_data_video', 'cache')) {
          if ($cache->expire < REQUEST_TIME) {
            cache_clear_all('science_today_trending_app_data_video', 'cache', TRUE);
          }
        }
        if (cache_get('science_today_trending_app_data_video')) {
          // return Drupal Cache API data
          $cache = cache_get('science_today_trending_app_data_video');
          echo(str_replace('\\/', '/', json_encode($cache->data)));
          exit();
        }
      }
      else if ($view->current_display == "science_today_trending_service_article") {
        // check Drupal Cache API for existing app data to mitigate Drupal query load
        // force clearing of existing cache item if it has expired
        if ($cache = cache_get('science_today_trending_app_data_article', 'cache')) {
          if ($cache->expire < REQUEST_TIME) {
            cache_clear_all('science_today_trending_app_data_article', 'cache', TRUE);
          }
        }
        if (cache_get('science_today_trending_app_data_article')) {
          // return Drupal Cache API data
          $cache = cache_get('science_today_trending_app_data_article');
          echo(str_replace('\\/', '/', json_encode($cache->data)));
          exit();
        }
      }
    }

  }

}

/**
 * Implements hook_views_post_render(&$view, &$output, &$cache)
 *
 * @param $view: The view being rendered.
 * @param $output: A flat string with the rendered output of the view.
 * @param $cache: The cache settings.
 */
function calacademy_views_post_render(&$view, &$output, &$cache) {
  // Handle views based on their machine name.
  switch ($view->name)
  {
    case 'hero_media':
      switch ($view->current_display)
      {
        case 'slideshow_standard';
          // Only replace the view if there is an existing result.
          if (count($view->result > 0))
          {
            $output = views_embed_view('hero_media', 'slideshow_standard_bridge', $view->result[0]->node_field_data_field_hero_slideshow_nid);
          }
          break;

        case 'slideshow_large':
          // Only replace the view if there is an existing result.
          if (count($view->result > 0))
          {
            $output = views_embed_view('hero_media', 'slideshow_large_bridge', $view->result[0]->node_field_data_field_hero_slideshow_large_nid);
          }
          break;
      }
      break;
  }
}

/**
 * Implements hook_views_pre_render(&$view)
 *
 */
function calacademy_views_pre_render(&$view) {

  // Handle views based on their machine name.
  switch ($view->name)
  {
    case 'grades':
      // Only perform this action if the current display starts with
      // "grade_range"_pane"...
      if (substr($view->current_display, 0, 11) == 'grade_range') {
        // Strip out all but the numerical value with its ordinal suffix.
        foreach ($view->result[0]->field_field_grades as $key => $grade) {
          $tmp = explode(' ', $grade['rendered']['#markup']);
          $grade['rendered']['#markup'] = $tmp[0];
        }
      }
      break;

    case 'nightlife_planetarium_shows':
    case 'events_promoted':
    case 'audience_pages':
    case 'event_detail':
    case 'event_list_of_parent_type':
    case 'events_related':
      //so we need to reformat the timeslot data from 24hr to 12hr
      if (isset($view->field['field_time_slots'])) {
        if($timeslots = $view->field['field_time_slots']) {

          foreach($timeslots->view->result AS &$ts) {
            foreach($ts->field_field_time_slots AS &$slots) {
              $slots['rendered']['#markup'] = DATE("g:i a", STRTOTIME($slots['rendered']['#markup']));
            }
          }
        }
      }
      break;

    case 'field_trips':
      // display $0.00 price field trips as "Free"
      foreach($view->result AS $key => $val) {
        if (isset($val->field_field_price_float)) {
          foreach($val->field_field_price_float AS $key => $price) {
            if (isset($price['raw']['value'])) {
              if ($price['raw']['value'] == "0") {
                $val->field_field_price_float[0]['raw']['value'] = '0';
                $val->field_field_price_float[0]['rendered']['#markup'] = 'Free';
              }
            }
          }
        }
      }
      // reformat the timeslot data from 24hr to 12hr for unique field trips time slot field
      if (isset($view->field['field_field_trip_time_slots'])) {
        if($timeslots = $view->field['field_field_trip_time_slots']) {

          foreach($timeslots->view->result AS &$ts) {
            foreach($ts->field_field_field_trip_time_slots AS &$slots) {
              $slots['rendered']['#markup'] = DATE("g:i a", STRTOTIME($slots['rendered']['#markup']));
            }
          }
        }
      }
      break;
  }
}

/**
* Convert speficic HTML entities back to ASCII chars
*
* Consider the context and potential ramifications of converting any given HTML
* entity back to ASCII, as this may introduce vulnerabilities.
*
* @author Rob Davidson
*
* @param $str
*   The string to be manipulated.
*
* @param $more = TRUE
*   By default converts all
 *  only &#039; and  &quot; are converted. Set to TRUE to convert an
*   extended set of HTML entities.
*/
function htmlEntitytoASCII($str = NULL, $more = TRUE) {
  $search = array(
    '&amp;',  // Ampersand
    '&#039;', // Single quote
    '&quot;', // Double quote
  );
  $replace = array(
    "&",
    "'",
    '"',
  );
  $str = str_replace($search, $replace, $str);

  if ($more) {
    // You can add whatever you want here. str_replace iterates through the
    // two arrays such that $replace[0] will replace all instances of
    // $search[0] and so on.
    $search = array(
      '&amp;',
    );
    $replace = array(
      '&',
    );
    $str = str_replace($search, $replace, $str);
  }

  return $str;
}

/**
* Implements hook_views_query_alter()
* @author Jay Mollica
*/
function calacademy_views_query_alter(&$view, &$query) {

  //the wrong date was being passed to this view by default, had to grab the nid being viewed and plug those dates on the nid into the query argument
  if($view->name == 'nightlife_planetarium_shows') {

    $nodeview = node_load($view->args[1]);

    $start_date = date('Y-m-d',$nodeview->field_date[LANGUAGE_NONE][0]['value']);
    $end_date = date('Y-m-d',$nodeview->field_date[LANGUAGE_NONE][0]['value2']);

    foreach ($query->where as &$condition_group) {

      foreach($condition_group['conditions'] as &$condition) {
        $field = $condition['field'];
        $val= $condition['value'];

        if (is_array($val)) {
          foreach($val AS $k => &$v) {
            if(strpos($k,"field_data_field_date_field_date_value") !== FALSE) {
              $condition['value'][':field_data_field_date_field_date_value'] = $start_date;
              $condition['value'][':field_data_field_date_field_date_value1'] = $end_date;
            }
          }
        }
      }
    }
  }
}

/**
* Implements hook_views_post_execute()
* @author Jay Mollica
*/

function calacademy_views_post_execute(&$view) {
  if($view->name == 'nightlife_planetarium_shows') {
    foreach($view->result AS $key => $val) {
      if(empty($val->field_field_time_slots)) {
        unset($view->result[$key]);
      }
      else {
        foreach($view->result AS &$result) {
          foreach($result->field_field_time_slots AS $key => $slot) {
            if (strtotime($slot['rendered']['#markup']) < strtotime("18:00:00")) {
              unset($result->field_field_time_slots[$key]);
            }
          }
        }
      }
    }
    foreach($view->result AS $key => $val) {
      if(empty($val->field_field_time_slots)) {
        unset($view->result[$key]);
      }
    }
  }
}

/**
* Alter Services Views results for particular REST service view
* Service endpoints:
* > /rest/science-today-trending
* > /rest/science-today-recent
* View: ES - Science Today Feeds
* > Display: Science Today Trending Service
* Dependencies:
* > function calacademy_views_pre_build
* > function _science_today_trending_data_from_google_api
* @author jause
*/
function calacademy_services_views_execute_view_alter(&$result, &$view_info) {
  
  switch ($view_info->current_display)
  {
    case 'science_today_recent_service':
    case 'science_today_category_academy_science_service':
    case 'science_today_category_earth_service':
    case 'science_today_category_life_service':
    case 'science_today_category_space_service':
    case 'science_today_category_sustainability_service':
    case 'science_today_category_technology_service':

    case 'science_today_recent_service_video':
    case 'science_today_category_academy_science_service_video':
    case 'science_today_category_earth_service_video':
    case 'science_today_category_life_service_video':
    case 'science_today_category_space_service_video':
    case 'science_today_category_sustainability_service_video':
    case 'science_today_category_technology_service_video':

    case 'science_today_recent_service_article':
    case 'science_today_category_academy_science_service_article':
    case 'science_today_category_earth_service_article':
    case 'science_today_category_life_service_article':
    case 'science_today_category_space_service_article':
    case 'science_today_category_sustainability_service_article':
    case 'science_today_category_technology_service_article':
        
      foreach ($result as $val) {
      
        $result_path = url('node/' . $val->nid);
        $result_page = str_replace('/explore-science/', '', $result_path);
        
        // parse empty array results to empty strings
        $title = _science_today_data_empty_array_to_empty_string($val->title);
        $byline = _science_today_data_empty_array_to_empty_string($val->byline);
        $summary = _science_today_data_empty_array_to_empty_string($val->summary);
        $body = _science_today_data_empty_array_to_empty_string($val->body);
        $image_large = _science_today_data_empty_array_to_empty_string($val->image_large);
        $image_small = _science_today_data_empty_array_to_empty_string($val->image_small);
        $poster_image_large = _science_today_data_empty_array_to_empty_string($val->poster_image_large);
        $poster_image_small = _science_today_data_empty_array_to_empty_string($val->poster_image_small);

        // view having problems removing html tags from summary text
        $summary = str_replace("<p>","",$summary);
        $summary = str_replace("</p>","",$summary);
        $summary = str_replace("\n","",$summary);

        $youtube_id = "";
        if (isset($val->youtube_id['video_id'])) {
          $youtube_id = $val->youtube_id['video_id'];
        }

        // Google Analaytics UTM tracking
        $utm = "";
        $utm_medium = "utm_medium=mobileapp";
        $utm_term = "utm_term="; // nothing for now
        $utm_camnpaign = "utm_camnpaign=sciencetoday";
        $utm_content = "utm_content=";
        $utm_source = "utm_source="; // client will provide source value [ios or android]
        
        $postdate = "";
        if (isset($val->date)) {
          $postdate = date("Y.m.d", $val->date);
        }

        $utm_content = $utm_content . $postdate . "_" . $result_page . "_";
        if ($youtube_id !== "") {
          $utm_content = $utm_content . "video";
        } else {
          $utm_content = $utm_content . "article";
        }

        $utm = "?" . $utm_medium . "&" . $utm_term . "&" . $utm_camnpaign . "&" . $utm_content . "&" . $utm_source;

        // standard hero images with captions include appended blockquotes
        $image_array = explode("<blockquote", $image_large);
        if (is_array($image_array)) {
          if (count($image_array) == 2) {
            $image_large = $image_array[0];
          }
        }
        $image_array = explode("<blockquote", $image_small);
        if (is_array($image_array)) {
          if (count($image_array) == 2) {
            $image_small = $image_array[0];
          }
        }

        // use hero token system to get image if necessary (esp. for slideshows)
        if (($image_large == "") && ($poster_image_large == "") && ($youtube_id == "")) {
          $hero_region_id = "";
          $array_hero_region_id = $val->hero_region_id;
          if (is_array($array_hero_region_id)) {
            $hero_region_id = $array_hero_region_id["value"];
            $imageUri = _calacademy_hero_token_get_image_uri($hero_region_id);
            $imageUri = str_replace("public://","",$imageUri);
            $image_large = '<img src="http://' . $_SERVER['SERVER_NAME'] . '/sites/default/files/styles/manual_crop_standard_960x540/public/' . $imageUri . '" width="960" height="540" alt="" />';
            $image_small = '<img src="http://' . $_SERVER['SERVER_NAME'] . '/sites/default/files/styles/manual_crop_square_460px/public/' . $imageUri . '" width="460" height="460" alt="" />';
          }
        }
        
        // add content path to json result (path problematic in view)
        $json = array(
          'path' => 'http://www.calacademy.org/explore-science/' . $result_page . "/" . $utm,
          'title' => $title,
          'byline' => $byline,
          'summary' => $summary,
          'body' => $body,
          'image_large' => $image_large,
          'image_small' => $image_small,
          'youtube_id' => $youtube_id,
          'poster_image_large' => $poster_image_large,
          'poster_image_small' => $poster_image_small,
          'image_credit' => '', // for future use
          'featured' => $val->featured,
          'category' => $val->category
        );
        $client_object[] = $json;

      }

      $result = $client_object;

      break;

    case 'science_today_trending_service':
    case 'science_today_trending_service_video':
    case 'science_today_trending_service_article':

      // get science today trending article data from google analytics api
      $trending_paths = _science_today_trending_data_from_google_api();
      
      // intersect $trending_paths and $result objects to arrive at new set
      // of 20 science today results in descending order of popularity.
      
      // HOW:
      // iterate through $trending_paths array of presorted (desc popularity)
      // list of science-today content paths.
      
      $i = 0;

      foreach($trending_paths as $trending_path) {
        
        // for each $trending item, look for a corresponding pattern match
        // in the $result object items url field.

        foreach ($result as $val) {
          
          $result_path = url('node/' . $val->nid);
          $result_page = str_replace('/explore-science/', '', $result_path);
          
          //if ((strpos($trending_path,$result_page) !== false) && ($i < 20)) {
          if (($trending_path == '/explore-science/' . $result_page) && ($i < 20)) {
            
            // parse empty array results to empty strings
            $title = _science_today_data_empty_array_to_empty_string($val->title);
            $byline = _science_today_data_empty_array_to_empty_string($val->byline);
            $summary = _science_today_data_empty_array_to_empty_string($val->summary);
            $body = _science_today_data_empty_array_to_empty_string($val->body);
            $image_large = _science_today_data_empty_array_to_empty_string($val->image_large);
            $image_small = _science_today_data_empty_array_to_empty_string($val->image_small);
            $poster_image_large = _science_today_data_empty_array_to_empty_string($val->poster_image_large);
            $poster_image_small = _science_today_data_empty_array_to_empty_string($val->poster_image_small);

            // view having problems removing html tags and newlines from summary text
            $summary = str_replace("<p>","",$summary);
            $summary = str_replace("</p>","",$summary);
            $summary = str_replace("\n","",$summary);

            $youtube_id = "";
            if (isset($val->youtube_id['video_id'])) {
              $youtube_id = $val->youtube_id['video_id'];
            }
            
            // Google Analaytics UTM tracking
            $utm = "";
            $utm_medium = "utm_medium=mobileapp";
            $utm_term = "utm_term="; // nothing for now
            $utm_camnpaign = "utm_camnpaign=sciencetoday";
            $utm_content = "utm_content=";
            $utm_source = "utm_source="; // client will provide source value [ios or android]
            
            $postdate = "";
            if (isset($val->date)) {
              $postdate = date("Y.m.d", $val->date);
            }

            $utm_content = $utm_content . $postdate . "_" . $result_page . "_";
            if ($youtube_id !== "") {
              $utm_content = $utm_content . "video";
            } else {
              $utm_content = $utm_content . "article";
            }

            $utm = "?" . $utm_medium . "&" . $utm_term . "&" . $utm_camnpaign . "&" . $utm_content . "&" . $utm_source;
            
            // standard hero images with captions include appended blockquotes
            $image_array = explode("<blockquote", $image_large);
            if (is_array($image_array)) {
              if (count($image_array) == 2) {
                $image_large = $image_array[0];
              }
            }
            $image_array = explode("<blockquote", $image_small);
            if (is_array($image_array)) {
              if (count($image_array) == 2) {
                $image_small = $image_array[0];
              }
            }

            // use hero token system to get image if necessary (esp. for slideshows)
            if (($image_large == "") && ($poster_image_large == "") && ($youtube_id == "")) {
              $hero_region_id = "";
              $array_hero_region_id = $val->hero_region_id;
              if (is_array($array_hero_region_id)) {
                $hero_region_id = $array_hero_region_id["value"];
                $imageUri = _calacademy_hero_token_get_image_uri($hero_region_id);
                $imageUri = str_replace("public://","",$imageUri);
                $image_large = '<img src="http://' . $_SERVER['SERVER_NAME'] . '/sites/default/files/styles/manual_crop_standard_960x540/public/' . $imageUri . '" width="960" height="540" alt="" />';
                $image_small = '<img src="http://' . $_SERVER['SERVER_NAME'] . '/sites/default/files/styles/manual_crop_square_460px/public/' . $imageUri . '" width="460" height="460" alt="" />';
              }
            }

            // drupal result page is in trending list
            // add $result item to new trending results array that can be
            // returned to client.
            $match = array(
              'path' => 'http://www.calacademy.org/explore-science/' . $result_page . "/" . $utm,
              'title' => $title,
              'byline' => $byline,
              'summary' => $summary,
              'body' => $body,
              'image_large' => $image_large,
              'image_small' => $image_small,
              'youtube_id' => $youtube_id,
              'poster_image_large' => $poster_image_large,
              'poster_image_small' => $poster_image_small,
              'image_credit' => '', // for future use
              'featured' => $val->featured,
              'category' => $val->category
            );
            $client_object[] = $match;

            $i++;
            
          }

        }

      }

      // cache results via Drupal Cache API - set to expire after 12 hours
      $data_to_cache = $client_object;

      if ($view_info->current_display == "science_today_trending_service") {
        cache_set('science_today_trending_app_data', $data_to_cache, 'cache',  REQUEST_TIME  + (3600 * 12));
      }
      else if ($view_info->current_display == "science_today_trending_service_video") {
        cache_set('science_today_trending_app_data_video', $data_to_cache, 'cache',  REQUEST_TIME  + (3600 * 12));
      }
      else if ($view_info->current_display == "science_today_trending_service_article") {
        cache_set('science_today_trending_app_data_article', $data_to_cache, 'cache',  REQUEST_TIME  + (3600 * 12));
      }

      $result = $client_object;

      break;

  }

}

function _science_today_data_empty_array_to_empty_string($obj) {

  if (is_array($obj)) {
    if (count($obj) == 0) {
      return '';
    }
  }
  return $obj;

}

function _science_today_trending_data_from_google_api() {
  
  // check Drupal Cache API for existing Google data to avoid heavy client load against Google API

  // force clearing of existing cache item if it has expired
  if ($cache = cache_get('science_today_trending_data_from_google_api_cache', 'cache')) {
    if ($cache->expire < REQUEST_TIME) {
      cache_clear_all('science_today_trending_data_from_google_api_cache', 'cache', TRUE);
    }
  }

  if (!cache_get('science_today_trending_data_from_google_api_cache')) {

    // get ordered list of trending science today content from google analytics api

    $libPath = libraries_get_path('google-api-php-client');

    set_include_path(get_include_path() . PATH_SEPARATOR . $libPath);

    // api dependencies
    require_once($libPath . '/Google/Client.php');
    require_once($libPath . '/Google/Service/Analytics.php');

    $client = new Google_Client();
    $client->setApplicationName("Science_Today_Trending");
    $service = new Google_Service_Analytics($client);

    if (isset($_SESSION['service_token'])) {
      $client->setAccessToken($_SESSION['service_token']);
    }
    $key = file_get_contents($libPath . '/Google/Science Today Trending-9ff6e410dd2d.p12');
    //$key = file_get_contents('/Users/jause/webserver-certs/Science Today Trending-9ff6e410dd2d.p12');
    $cred = new Google_Auth_AssertionCredentials(
        '1046840952950-9l4rt3b4isct93t6840cfim5ucp9gf69@developer.gserviceaccount.com',
        array('https://www.googleapis.com/auth/analytics.readonly'),
        $key
    );

    $client->setClassConfig('Google_Cache_File', array('directory' => '/tmp/cache'));

    $client->setAssertionCredentials($cred);
    if($client->getAuth()->isAccessTokenExpired()) {
      $client->getAuth()->refreshTokenWithAssertion($cred);
    }
    $_SESSION['service_token'] = $client->getAccessToken();

    // query for past 3 months
    $threemonthsago = date("Y-m-d", time() + (60 * 60 * 24 * -90));
    $today = date("Y-m-d");

    $ids = 'ga:12551229';
    $startDate = $threemonthsago;
    $endDate = $today;
    $metrics = 'ga:pageviews';
    $optParams = array(
      'dimensions' => 'ga:pagePath',
      'filters' => 'ga:pagePath=@explore-science/',
      'sort' => '-ga:pageviews',
      'max-results' => '200'
    );

    $results = $service->data_ga->get($ids, $startDate, $endDate, $metrics, $optParams);

    // reduce results to simple array of content paths
    foreach ($results->getRows() as $row) {
      $path = $row[0];
      // handle repeat page visit record for trailing slash or not in page view
      if (substr($path, strlen($path)-1, 1) == "/") {
        $path = substr($path, 0, strlen($path)-1);
      }
      $array_paths[] = $path;
    }
    // remove duplicates
    $array_paths = array_unique($array_paths);

    // cache results via Drupal Cache API - set to expire after 12 hours
    $data_to_cache = $array_paths;
    cache_set('science_today_trending_data_from_google_api_cache', $data_to_cache, 'cache',  REQUEST_TIME + (3600 * 12));
    
    return $array_paths;

  } else {

    // return Drupal Cache API data
    $cache = cache_get('science_today_trending_data_from_google_api_cache');
    
    $results = $cache->data;
    
    return $results;

  }

}
