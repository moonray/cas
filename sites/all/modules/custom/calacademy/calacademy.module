<?php

/**
 * Convert a string of terms to a array usuable by Views as WHERE conditions.
 * @author Rob Davidson
 *
 * @param $term_list: An array of taxonomy terms.
 *
 * @return An array of term ids usable as query conditions.
 */
define("CAS_LOGICAL_OPERATOR_AND", "+");
define("CAS_LOGICAL_OPERATOR_OR", ",");
function _entityref_ids_from_names($itemList, $refType, $operator = CAS_LOGICAL_OPERATOR_OR) {
  // Break the tag string up into a workable array.
  $argArray = array();
  $argArray = explode(', ', $itemList);
  // Declare the term id array
  $argIdArray = array();
  // Loop through the argument array and gather entity id's.
  foreach ($argArray as $delta => $arg) {
    // Get the correct entity id for the supplied entity argument.
    switch ($refType) {

      case 'tid':
      case 'field_tags_tid':
        $entityID = _get_tid_from_term($arg);
        break;

      case 'nid':
        $entityID = _get_nid_from_title($arg);
        break;

      case 'uid':
        $entityID = _get_uid_from_name($arg);
        break;

      case 'field_file_reference_target_id':
        $entityID = _get_fid_from_file($arg);
        break;

      case 'field_vocabulary_reference_target_id':
        $entityID = _get_vid_from_vocab_name($arg);
        break;
    }
    // If there is an entity id then add it to the argument id array.
    if (isset($entityID)) {
      $argIdArray[] = $entityID;
    }
  }
  // Reassemble the argument array.
  $argList = implode($operator, $argIdArray);
  // If the argument list doesnt exist then return an error.
  if ($argList == '') {
    $argList = $itemList;
  }
  return $argList;
}

/**
 * Expose an object to html
 *
 * @author Rob Davidson
 *
 * @param $obj: The object to expose.
 * @param $label: An optional label for the exposed object.
 *
 * @return An exposed object or array wrapped inside a <pre> element for formatting.
 */
function _expose_obj($obj, $label = '') {
	return '<pre>' . $label . ' => ' . print_r($obj, true) . '</pre>';
}

/**
 *
 * @param type $file_name
 */
function _get_nid_from_title($node_title) {
  $query = new EntityFieldQuery();
  // Build the query then execute and store the result in $entities
  $entities = $query->entityCondition('entity_type', 'node')
//    ->propertyCondition('type', 'my_type')
    ->propertyCondition('title', $node_title)
    ->propertyCondition('status', 1)
    ->range(0, 1)
    ->execute();
  // If the result contains node information then return the nodes nid value.
  if (!empty($entities['node'])) {
    $node = node_load(array_shift(array_keys($entities['node'])));
    return $node->nid;
  }

  return NULL;
}

/**
 * Get a terms id by term name and vocabulary
 * @author Rob Davidson
 *
 * @param $term_name
 * @param $vocabulary
 * @return integer
 */
function _get_tid_from_term($term_name, $vocabulary = NULL) {
  // Get the term object.
  $term = taxonomy_get_term_by_name($term_name, $vocabulary);
  // Push the objects values to the object root.
  $term = current(array_values($term));
  // If there is a term id return it otherwise return flase
  if ($term->tid) {
    return $term->tid;
  }
  else {
    return NULL;
  }
}

/**
 * Helper function to handle the output for the Hero Media field.
 * @author Rob Davidson <rob@custommojo.com>
 *
 * @param type $field_collection
 */
function _hero_media_thumbnail_output($heroRegion, $originalOutput) {
  // Set the default output to be the orignal output supplied by the theme.
  $output = $originalOutput;
  // Alter the thumbnail output based on the selected type of Hero Media.
  switch ($heroRegion['field_hero_type'][0]['#markup'])
  {
    case 'slideshow-standard':
      $slideshowID = $heroRegion['field_hero_slideshow'][0]['#markup'];
      $output = views_embed_view('hero_media', 'standard_slideshow_thumbnail', $slideshowID);
      break;

    case 'slideshow-large':
      $slideshowID = $heroRegion['field_hero_slideshow_large'][0]['#markup'];
      $output = views_embed_view('hero_media', 'large_slideshow_thumbnail', $slideshowID);
      break;
    case 'video-youtube':
      // The video has a curated poster image so ignore the YouTube thumbnail.
      if (isset($heroRegion['field_poster_image']))
      {
        $output = render($heroRegion['field_poster_image']);
      }
  }
  return $output;
}

/**
 * Check to see if the passed parameter already exists as a node Title in the
 * database.
 *
 * @param $title: The title to test for.
 * @return bool If a result was found return TRUE else return FALSE.
 */
function _title_exists($title) {
  return db_query("SELECT nid FROM {node} WHERE title = \"" . $title . "\"")->fetchField();
}

/**
 * Implements hook_form_alter(&$form, &$form_state, $form_id)
 * @author Rob Davidson <rob@custommojo.com>
 *
 * @param $form: Nested array of form elements that comprise the form.
 * @param $form_state: A keyed array containing the current state of the form.
 *        The arguments that drupal_get_form() was originally called with are
 *        available in the array $form_state['build_info']['args'].
 * @param $form_id: String representing the name of the form itself. Typically
 *        this is the name of the function that generated the form.
 */
function calacademy_form_alter(&$form, &$form_state, $form_id) {

  // Handle special processing for the Hero Region field collection.
  if (substr($form_id, strlen($form_id) - 9) == 'node_form' && isset($form['field_hero_region']))
  {
    // Add the JS/jQ required for the Hero media system.
    drupal_add_js(drupal_get_path('module', 'calacademy') . '/js/hero-region--hero-type-toggle.js', 'file');
    $form['#attached']['js'] = array(
      drupal_get_path('module', 'calacademy') . '/js/hero-region--hero-type-toggle.js' => array('type' => 'file'),
    );

    foreach ($form['field_hero_region'][LANGUAGE_NONE][0] as $key => $field)
    {
      if ((is_array($field) && substr($key, 0, 6) == 'field_') && $key != 'field_hero_type')
      {
        $form['field_hero_region'][LANGUAGE_NONE][0][$key]['#attributes']['class'][] = 'element-invisible';
      }
    }
  }

  // Handle specific forms by $form_id.
  switch ($form_id) {

    case 'person_node_form':
      drupal_add_js(drupal_get_path('module', 'calacademy') . '/js/person--additional-info-toggle.js', 'file');
      $form['#attached']['js'] = array(
        drupal_get_path('module', 'calacademy') . '/js/person--additional-info-toggle.js' => array('type' => 'file'),
      );
      break;
  }
}

/**
 * Implements hook_node_presave($node)
 *
 * Act on a node being inserted or updated.
 * This hook is invoked from node_save() before the node is saved to the database.
 *
 * @author Rob Davidson
 *
 * @param $node: The node that is being inserted or updated.
 *
 */
function calacademy_node_presave($node) {

	// Trim preceeding and trailing whitespace from the Title field.
	$node->title = trim($node->title);

	/**
	 * If field_featured exists, have Drupal's "Promoted to front page" setting
	 * mirror the "Flag this content as featured" setting.
	 */
	if (property_exists($node, 'field_featured')) {

		// The field_featured property exists so work the Mojo.
		if ($node->promote != $node->field_featured[LANGUAGE_NONE][0]['value']) {
			$node->promote = $node->field_featured[LANGUAGE_NONE][0]['value'];
		}
	}

  // Handle presave by content type.
  switch ($node->type) {

		case 'mycontenttype_node_form':
		break;
	}
}

/**
 * Implements hook_field_collection_item_presave(FieldCollectionItemEntity $field_collection_item)
 *
 * @param FieldCollectionItemEntity $field_collection_item
 *   The field collection item that is being inserted or updated.
 *
 * @note Saving this functionality for use in the standalone version.
 */
function calacademy_field_collection_item_presave(FieldCollectionItemEntity $field_collection_item) {
  switch ($field_collection_item->field_name)
  {
    case 'field_hero_region':
      $field_collection_item = _calacademy_node_presave_hero($field_collection_item, $field_collection_item->field_hero_type[LANGUAGE_NONE][0]['value']);
      break;
  }
}

/**
 * Helper function to clear unused hero fields.
 * @author Rob Davidson <rob@custommojo.com>
 * // It's not elegant but it works.
 *
 * @param $active_hero: The hero field to ignore when clearing field data.
 */
function _calacademy_node_presave_hero(&$field_collection_item, $active_hero) {
  // Clear Hero fields if they are not active.
  if ($active_hero != 'image-standard')
  {
    $field_collection_item->field_image_primary[LANGUAGE_NONE] = array();
  }
  if ($active_hero != 'image-large')
  {
    $field_collection_item->field_image_primary_large[LANGUAGE_NONE] = array();
  }
  if ($active_hero != 'slideshow-standard')
  {
    $field_collection_item->field_hero_slideshow[LANGUAGE_NONE] = array();
  }
  if ($active_hero != 'slideshow-large')
  {
    $field_collection_item->field_hero_slideshow_large[LANGUAGE_NONE] = array();
  }
  if ($active_hero != 'video-youtube')
  {
    $field_collection_item->field_youtube_video[LANGUAGE_NONE] = array();
    $field_collection_item->field_poster_image[LANGUAGE_NONE] = array();
  }
  return $field_collection_item;
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 * Set the '#wysiwyg'-attribute to false for the summary fields.
 */
function calacademy_field_widget_text_textarea_with_summary_form_alter(&$element, &$form_state, $context) {
  if (isset($element['summary']) && !isset($element['summary']['#wysiwyg'])) $element['summary']['#wysiwyg'] = false;
}

/**
 * Implements hook_node_validate($node, $form, &$form_state)
 * @author Rob Davidson
 *
 * @param $node: The node being validated.
 * @param $form: The form being used to edit the node.
 * @param $form_state: The form state array.
 */
function calacademy_node_validate($node, $form, &$form_state) {

  // TODO Remove this once the new Hero system is complete.
  // Ensure that the Primary Image field is actually required to submit content
  // containing that field.
  if (key_exists('field_image_primary', $form_state['complete form'])) {
    $fidValue = (isset($form_state['complete form']['field_image_primary'][LANGUAGE_NONE][0]['#value']['fid'])) ? $form_state['complete form']['field_image_primary'][LANGUAGE_NONE][0]['#value']['fid'] : NULL;
    if (!isset($fidValue) || $fidValue == 0) {
      form_set_error('field_image_primary', 'You must choose a Primary Image.');
    }
  }

  // TODO Review the unique title handling.
  /*
  if (_title_exists($title)) {
    form_set_error('title', t('The Title you have specified is already in use, you must provide a unique Title for this content.'));
  }
 */

  // Handle the validation of the Hero settings.
  calacademy_node_validate_hero($node, $form, $form_state);

}

/**
 * Helper function for validating the Hero settings.
 * @author Rob Davidson <rob@custommojo.com>
 */
function calacademy_node_validate_hero($node, $form, $form_state) {
  if (isset($node->field_hero_region))
  {
    switch($node->field_hero_region['und'][0]['field_hero_type']['und'][0]['value'])
    {
      case 'image-standard':
        if ($node->field_hero_region['und'][0]['field_image_primary']['und'][0]['fid'] == 0)
        {
          form_set_error('field_image_primary', t('The Standard Image selection requires an image.'));
        }
        break;

      case 'image-large':
        if ($node->field_hero_region['und'][0]['field_image_primary_large']['und'][0]['fid'] == 0)
        {
          form_set_error('field_image_primary_large', t('The Large Image selection requires an image.'));
        }
        break;

      case 'slideshow-standard':
        if ($node->field_hero_region['und'][0]['field_hero_slideshow']['und'][0]['target_id'] == '')
        {
          form_set_error('field_hero_slideshow', t('The Standard Slideshow selection requires a slideshow reference.'));
        }
        break;

      case 'slideshow-large':
        if ($node->field_hero_region['und'][0]['field_hero_slideshow_large']['und'][0]['target_id'] == '')
        {
          form_set_error('field_hero_slideshow_large', t('The Large Slideshow selection requires a slideshow reference.'));
        }
        break;
    }
  }
}

/**
 * Implements hook_views_pre_build(&$view)
 *
 * @param $view: The view to be processed.
 */
function calacademy_views_pre_build(&$view) {
  // Check for the existence of multiple value term arguments and convert them
  // to term ids.
  if (isset($view->name)) {
    // Only proceed if arguments are present.
    if (count($view->args) > 0) {
      // Loop through the available arguments and store indexes.
      $argIndex = 0;
      // Make sure we there are views args before we try to iterate.
      if (count($view->argument) > 0)
      {
        foreach ($view->argument as $key => $arg) {
          $refType = NULL;

          if (isset($view->args[$argIndex]) && !is_numeric($view->args[$argIndex])) {
            $view->args[$argIndex] = _entityref_ids_from_names($view->args[$argIndex], $key);
          }
          $argIndex ++;
        }
      }
    }
  }
}

/**
 * Implements hook_views_post_render(&$view, &$output, &$cache)
 *
 * @param $view: The view being rendered.
 * @param $output: A flat string with the rendered output of the view.
 * @param $cache: The cache settings.
 */
function calacademy_views_post_render(&$view, &$output, &$cache) {
  // Handle views based on their machine name.
  switch ($view->name)
  {
    case 'hero_media':
      switch ($view->current_display)
      {
        case 'slideshow_standard';
          $output = views_embed_view('hero_media', 'slideshow_standard_bridge', $view->result[0]->node_field_data_field_hero_slideshow_nid);
          break;

        case 'slideshow_large':
          $output = views_embed_view('hero_media', 'slideshow_large_bridge', $view->result[0]->node_field_data_field_hero_slideshow_large_nid);
          break;
      }
      break;
  }
}

/**
 * Implements hook_views_pre_render(&$view)
 *
 */
function calacademy_views_pre_render(&$view) {
  // Handle views based on their machine name.
  switch ($view->name)
  {
    case 'grades':
      // Only perform this action if the current display starts with
      // "grade_range"_pane"...
      if (substr($view->current_display, 0, 11) == 'grade_range') {
        // Strip out all but the numerical value with its ordinal suffix.
        foreach ($view->result[0]->field_field_grades as $key => $grade) {
          $tmp = explode(' ', $grade['rendered']['#markup']);
          $grade['rendered']['#markup'] = $tmp[0];
        }
      }
      break;

    case 'nightlife_planetarium_shows':
    case 'field_trips':
    case 'events_promoted':
    case 'audience_pages':
    case 'event_detail':
    case 'event_list_of_parent_type':
      //so we need to reformat the timeslot data from 24hr to 12hr
      if (isset($view->field['field_time_slots'])) {
        if($timeslots = $view->field['field_time_slots']) {

          foreach($timeslots->view->result AS &$ts) {
            foreach($ts->field_field_time_slots AS &$slots) {
              $slots['rendered']['#markup'] = DATE("g:ia", STRTOTIME($slots['rendered']['#markup']));
            }
          }
        }
      }
      break;

    case 'field_trips':
      // display $0.00 price field trips as "Free"
      foreach($view->result AS $key => $val) {
        if (isset($val->field_field_price_float)) {
          foreach($val->field_field_price_float AS $key => $price) {
            if (isset($price['raw']['value'])) {
              if ($price['raw']['value'] == "0") {
                $val->field_field_price_float[0]['raw']['value'] = '0';
                $val->field_field_price_float[0]['rendered']['#markup'] = 'Free';
              }
            }
          }
        }
      }
      break;
  }
}

/**
 * Implements hook_ctools_render_alter(&$info, &$page, &$context)
 * Alter everything.
 *
 * - Using this function since hook_node_view never gets called when the node is
 *   rendered by Ctools (Panels).
 *
 * @author Rob Davidson
 *
 * @param $info: An associative array containing the following keys:
 * - content: The rendered content.
 * - title: The content's title.
 * - no_blocks: A boolean to decide if blocks should be displayed.
 *
 * @param $page: If TRUE then this renderer owns the page and can use theme('page') for
 * 				no blocks; if false, output is returned regardless of any no blocks settings.
 *
 * @param $context: An associative array containing the following keys:
 * 	- args: The raw arguments behind the contexts.
 * 	- contexts: The context objects in use.
 * 	- task: The task object in use.
 * 	- subtask: The subtask object in use.
 * 	- handler: The handler object in use.
 */
function calacademy_ctools_render_alter(&$info, &$page, &$context) {
  // Handle Page Variants based on title.
  switch (strtolower($info['title']))
  {
    case 'lesson plans':
      // Add the required jQuery for the Featured Lesson Plans slider.
      drupal_add_js("
        jQuery(window).load(function(){
          jQuery('.flexslider-1').flexslider({
            animation: 'slide',
            itemWidth: 220,
            minItems: 1,
            maxItems: 4
         });
        });", array('type' => 'inline',  'scope' => 'header', 'weight' => 10));
      break;
  }
}

/**
* Convert speficic HTML entities back to ASCII chars
*
* Consider the context and potential ramifications of converting any given HTML
* entity back to ASCII, as this may introduce vulnerabilities.
*
* @author Rob Davidson
*
* @param $str
*   The string to be manipulated.
*
* @param $more = TRUE
*   By default converts all
 *  only &#039; and  &quot; are converted. Set to TRUE to convert an
*   extended set of HTML entities.
*/
function htmlEntitytoASCII($str = NULL, $more = TRUE) {
	$search = array(
  	'&amp;',	// Ampersand
		'&#039;',	// Single quote
		'&quot;',	// Double quote
	);
	$replace = array(
  	"&",
  	"'",
  	'"',
	);
	$str = str_replace($search, $replace, $str);

	if ($more) {
		// You can add whatever you want here. str_replace iterates through the
		// two arrays such that $replace[0] will replace all instances of
		// $search[0] and so on.
		$search = array(
			'&amp;',
		);
		$replace = array(
			'&',
		);
		$str = str_replace($search, $replace, $str);
	}

	return $str;
}

/**
* Implements hook_views_query_alter()
* @author Jay Mollica
*/
function calacademy_views_query_alter(&$view, &$query) {

  //the wrong date was being passed to this view by default, had to grab the nid being viewed and plug those dates on the nid into the query argument
  if($view->name == 'nightlife_planetarium_shows') {

    $nodeview = node_load($view->args[1]);

    $start_date = date('Y-m-d',$nodeview->field_date[LANGUAGE_NONE][0]['value']);
    $end_date = date('Y-m-d',$nodeview->field_date[LANGUAGE_NONE][0]['value2']);

    foreach ($query->where as &$condition_group) {

      foreach($condition_group['conditions'] as &$condition) {
        $field = $condition['field'];
        $val= $condition['value'];

        if (is_array($val)) {
          foreach($val AS $k => &$v) {
            if(strpos($k,"field_data_field_date_field_date_value") !== FALSE) {
              $condition['value'][':field_data_field_date_field_date_value'] = $start_date;
              $condition['value'][':field_data_field_date_field_date_value1'] = $end_date;
            }
          }
        }
      }
    }
  }
}

/**
* Implements hook_views_post_execute()
* @author Jay Mollica
*/

function calacademy_views_post_execute(&$view) {
  if($view->name == 'nightlife_planetarium_shows') {
    foreach($view->result AS $key => $val) {
      if(empty($val->field_field_time_slots)) {
        unset($view->result[$key]);
      }
      else {
        foreach($view->result AS &$result) {
          foreach($result->field_field_time_slots AS $key => $slot) {
            if (strtotime($slot['rendered']['#markup']) < strtotime("18:00:00")) {
              unset($result->field_field_time_slots[$key]);
            }
          }
        }
      }
    }
    foreach($view->result AS $key => $val) {
      if(empty($val->field_field_time_slots)) {
        unset($view->result[$key]);
      }
    }
  }
}
