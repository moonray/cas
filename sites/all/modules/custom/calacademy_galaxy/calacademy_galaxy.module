<?php
/*
This module is for making sure all of the Academy ticket links are up to date and never fall stale.

It populates a vocabulary with data from a json feed provided by IT/Business Applications.

To work correctly, there must be a vocabulary in drupal with the machine name "ticket_links".
There must also be the correct fields with the correct machine names:
1. Name (name)
2. Galaxy Link (field_galaxy_link) - link field type with title and url
3. PLU (field_plu) - text feild - this is ostensibly a unique field and used to reverse lookup products
4. Disabled (field_disabled) - boolean, this is used to exclude certain products from being displayed to the user when selecting ticket links to include on page
5. Product Prices (field_product_prices) - field collection of two text fields (field_product_name and field_price) - a variable number of prices is allowed for each product

*/

  function calacademy_galaxy_init() {

    $vid = db_query("SELECT vid FROM {taxonomy_vocabulary} WHERE machine_name = 'ticket_links'")->fetchField();

    $terms = taxonomy_get_tree($vid);

    include 'example.php';

    $products = json_decode($products);  //get the galaxy product info

    $term_info = array();

    foreach($terms AS $t) {

      $term = taxonomy_term_load($t->tid);

      $plu = field_view_field('taxonomy_term',$term,'field_plu',$display = array('label' => 'hidden'));
      $plu = strip_tags(render($plu));

      $term_info[$t->tid] = trim($plu);

    }

    foreach($products AS $product) {

      $product_prices = get_object_vars($product->price);

      if(in_array($product->plu,$term_info)) {

        $tid = array_search($product->plu, $term_info);

        $term = taxonomy_term_load($tid);

        $term->original = $term;
        $term->name = $product->name;
        $term->tid = $tid;
        $term->field_plu[LANGUAGE_NONE][0]['value'] = $product->plu;
        $term->field_galaxy_link[LANGUAGE_NONE][0]['url'] = $product->url;
        $term->field_galaxy_link[LANGUAGE_NONE][0]['title'] = $product->name;

        $fc_names = array();
        //update existing prices, enter new prices in api that are not in drupal and remove prices in drupal that are not in api
        foreach($term->field_product_prices['und'] AS &$price) {

          $fc = entity_load('field_collection_item', array($price['value']));

          foreach($fc AS $key => &$item) {
            $fc_name = strip_tags($item->field_product_name['und'][0]['value']);
            $fc_names[$fc_name] = strip_tags($item->field_price['und'][0]['value']);

            //if the name/price is already in drupal update it
            if(array_key_exists($fc_name, $product_prices)) {
              $item->field_price['und'][0]['value'] = $product_prices[$fc_name];
            }
            else {
              //delete name/price if it only exists in drupal and not galaxy
              entity_delete('field_collection_item', $key);
            }

          }

        }

        $new_prices = array_diff_key($product_prices,$fc_names);

        foreach($new_prices AS $name => $price) {
          $product_info = taxonomy_term_load($tid);
          $product_prices = entity_create('field_collection_item', array('field_name' => 'field_product_prices'));
          $product_prices->setHostEntity( 'taxonomy_term', $product_info );

          $product_prices->field_product_name['und'][0]['value'] = $name;
          $product_prices->field_price['und'][0]['value'] = $price;
          $product_prices->save(FALSE);
        }

      }

      else {

        //create products on api that are not found in drupal
        $term = new stdClass();
        $term->vid = $vid;
        $term->name = $product->name;
        $term->field_plu[LANGUAGE_NONE][0]['value'] = $product->plu;
        $term->field_galaxy_link[LANGUAGE_NONE][0]['url'] = $product->url;
        $term->field_galaxy_link[LANGUAGE_NONE][0]['title'] = $product->name;

        taxonomy_term_save($term);

        $tid = $term->tid;
        $product_info = taxonomy_term_load($tid);  //tid

        foreach($product->price AS $key => $val) {
          $product_prices = entity_create('field_collection_item', array('field_name' => 'field_product_prices'));
          $product_prices->setHostEntity( 'taxonomy_term', $product_info );

          $product_prices->field_product_name['und'][0]['value'] = $key;
          $product_prices->field_price['und'][0]['value'] = $val;
          $product_prices->save(FALSE);
        }

      }

    }

  }

