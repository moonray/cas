<?php

/**
*This module is for making sure all of the Academy ticket links are up to date and never fall stale.
*It populates a vocabulary with data from a json feed provided by IT/Business Applications.
* @author Jay Mollica <jmollica@calacademy.org>
*/

//this function updates/deletes and writes to the vocabulary
  function _calacademy_galaxy_update() {

    $vid = db_query("SELECT vid FROM {taxonomy_vocabulary} WHERE machine_name = 'gx_ticketing_links'")->fetchField();

    $terms = taxonomy_get_tree($vid);

    $products = json_decode(file_get_contents('http://wonka.calacademy.org/csvtoarr.php'));  //get the galaxy product info

    dpm($products);

    $term_info = array();

    foreach($terms AS $t) {

      $term = taxonomy_term_load($t->tid);

      $gxid = field_view_field('taxonomy_term',$term,'field_gx_url_id',$display = array('label' => 'hidden'));
      $gxid = strip_tags(render($gxid));

      $term_info[$t->tid] = trim($gxid);

    }

    foreach($products AS $product) {

      $product_plus = $product->plus;

      if(in_array($product->linkID,$term_info)) {

        $tid = array_search($product->linkID, $term_info);

        $term = taxonomy_term_load($tid);

        $term->original = $term;
        $term->name = $product->Category;
        $term->tid = $tid;
        $term->field_gx_product_name[LANGUAGE_NONE][0]['value'] = $product->Category;
        $term->field_gx_product_url_id[LANGUAGE_NONE][0]['value'] = $product->linkID;
        $term->field_gx_product_link[LANGUAGE_NONE][0]['url'] = $product->url;
        $term->field_gx_product_link[LANGUAGE_NONE][0]['title'] = $product->Category;

        $fc_plus = array();
        //update existing prices, enter new prices in api that are not in drupal and remove prices in drupal that are not in api

        foreach($term->gx_price_collection[LANGUAGE_NONE] AS &$price) {

          $fc = entity_load('field_collection_item', array($price['value']));

          foreach($fc AS $key => &$item) {
            if (count($item->gx_price_value) > 0) {
              $fc_plu = strip_tags($item->gx_price_plu[LANGUAGE_NONE][0]['value']);
              $fc_plus[$fc_plu] = strip_tags($item->gx_price_value[LANGUAGE_NONE][0]['value']);
              //if the name/price is already in drupal update it
              if(array_key_exists($fc_plu, $product_plus)) {
                $item->gx_price_value[LANGUAGE_NONE][0]['value'] = $product_prices[$fc_plu];
              }
              else {
                //delete name/price if it only exists in drupal and not galaxy
                entity_delete('field_collection_item', $key);
              }
            }
          }
        }

        $new_prices = array_diff_key($product_prices,$fc_plus);

        foreach($new_prices AS $name => $price) {
          $product_info = taxonomy_term_load($tid);
          $product_prices = entity_create('field_collection_item', array('field_name' => 'gx_price_collection'));
          $product_prices->setHostEntity( 'taxonomy_term', $product_info );

          $product_prices->gx_price_label[LANGUAGE_NONE][0]['value'] = $name;
          $product_prices->gx_price_value[LANGUAGE_NONE][0]['value'] = $price;
          $product_prices->save(FALSE);
        }
      }

      else {

        //create products on api that are not found in drupal
        $term = new stdClass();
        $term->vid = $vid;
        $term->name = $product->Category;
        $term->field_gx_product_name[LANGUAGE_NONE][0]['value'] = $product->Category;
        $term->field_gx_product_url_id[LANGUAGE_NONE][0]['value'] = $product->linkID;
        $term->field_gx_product_link[LANGUAGE_NONE][0]['url'] = $product->url;
        $term->field_gx_product_link[LANGUAGE_NONE][0]['title'] = $product->Category;

        taxonomy_term_save($term);

        $tid = $term->tid;
        $product_info = taxonomy_term_load($tid);  //tid

        foreach($product->plus AS $plu) {
          $product_prices = entity_create('field_collection_item', array('field_name' => 'gx_price_collection'));
          $product_prices->setHostEntity( 'taxonomy_term', $product_info );
          $product_prices->gx_price_label[LANGUAGE_NONE][0]['value'] = $plu->description;
          $product_prices->gx_price_value[LANGUAGE_NONE][0]['value'] = $plu->price;
          $product_prices->gx_price_plu[LANGUAGE_NONE][0]['value'] = $plu->plu;
          $product_prices->save(FALSE);
        }
      }

    }
  }

/**
*implements hook_enable()
*/

  function calacademy_galaxy_enable() {

    $vid = db_query("SELECT vid FROM {taxonomy_vocabulary} WHERE machine_name = 'gx_ticketing_links'")->fetchField();

    //upon module enable let's check to see if the vocabulary exists, if not let's create it and assign fields
    if(!$vid) {
      taxonomy_vocabulary_save((object) array(
        'name' => 'Galaxy Ticketing Links',
        'machine_name' => 'gx_ticketing_links',
      ));

      $vid = db_query("SELECT vid FROM {taxonomy_vocabulary} WHERE machine_name = 'gx_ticketing_links'")->fetchField();

      $gx_fields = array(
        array(
          'label' => 'Product Name',
          'machine_name' => 'field_gx_product_name',
          'type' => 'text',
          'widget' => 'text_textfield',
          'description' => 'The name of the product'
        ),
        array(
          'label' => 'Product Description',
          'machine_name' => 'field_gx_product_description',
          'type' => 'text_long',
          'widget' => 'text_textarea',
          'description' => 'A brief description of the product'
        ),
        array(
          'label' => 'Product Link',
          'machine_name' => 'field_gx_product_link',
          'type' => 'link_field',
          'widget' => 'link_field',
          'description' => 'The URL to the gateway ticketing store'
        ),
        array(
          'label' => 'URL ID',
          'machine_name' => 'field_gx_url_id',
          'type' => 'text',
          'widget' => 'text_textfield',
          'description' => 'The unique ID of the store URL'
        ),
        array(
          'label' => 'Disabled',
          'machine_name' => 'field_gx_product_disabled',
          'type' => 'list_boolean',
          'widget' => 'options_onoff',
          'description' => 'Check if the product is defunct'
        )
      );

      $gx_field_collection = array(
        array(
          'field' => array(
            'field_name' => 'gx_price_collection',
            'label' => t('Price Type'),
            'cardinality' => FIELD_CARDINALITY_UNLIMITED,
            'type' => 'field_collection',
          ),
          'instance' => array(
            'field_name' => 'gx_price_collection',
            'entity_type' => 'taxonomy_term',
            'bundle' => 'gx_ticketing_links',
            'label' => t('Prices'),
            'cardinality' => FIELD_CARDINALITY_UNLIMITED,
            'description' => '',
            'widget' => array('type' => 'field_collection_embed'),
            'required' => 0,
          ),
        ),
        array(
          'field' => array(
            'field_name' => 'gx_price_label',
            'type' => 'text',
            'label' => 'Price Label',
          ),
          'instance' => array(
            'field_name' => 'gx_price_label',
            'entity_type' => 'field_collection_item',
            'bundle' => 'gx_price_collection',
            'label' => 'Ticket Type',
            'cardinality' => 1,
            'description' => '',
            'widget' => array('type' => 'text_textfield'),
          ),
        ),
        array(
          'field' => array(
            'field_name' => 'gx_price_value',
            'type' => 'text',
            'label' => 'Price',
          ),
          'instance' => array(
            'field_name' => 'gx_price_value',
            'entity_type' => 'field_collection_item',
            'bundle' => 'gx_price_collection',
            'label' => 'Ticket Price',
            'cardinality' => 1,
            'description' => '',
            'widget' => array('type' => 'text_textfield'),
          ),
        ),
        array(
          'field' => array(
            'field_name' => 'gx_price_plu',
            'type' => 'text',
            'label' => 'Price',
          ),
          'instance' => array(
            'field_name' => 'gx_price_plu',
            'entity_type' => 'field_collection_item',
            'bundle' => 'gx_price_collection',
            'label' => 'Product PLU',
            'cardinality' => 1,
            'description' => '',
            'widget' => array('type' => 'text_textfield'),
          ),
        ),
      );

      //create product name field and attach to vocabulary
      $i = 3;
      foreach($gx_fields AS $gx_field) {
        field_info_cache_clear();

        if(!field_info_field($gx_field['machine_name'])) {
          $field = array(
            'field_name' => $gx_field['machine_name'],
            'type' => $gx_field['type'],
            'label' => t($gx_field['label'])
          );
          field_create_field($field);
        }

        // Attach the field to our taxonomy entity
        $instance = array(
          'field_name' => $gx_field['machine_name'],
          'entity_type' => 'taxonomy_term',
          'bundle' => 'gx_ticketing_links',
          'label' => t($gx_field['label']),
          'description' => t('Description'),
          'required' => true,
          'widget' => array(
            'type' => $gx_field['widget'],
            'weight' => $i
          ),
        );
        field_create_instance($instance);
        $i++;
      }

      foreach($gx_field_collection AS $fc) {
        field_info_cache_clear();
        if (!field_info_field($fc['field']['field_name'])) {
          field_create_field($fc['field']);
        }
          // Check if instance exists
        if (!field_info_instance($fc['instance']['entity_type'], $fc['instance']['field_name'], $fc['instance']['bundle'])) {
          field_create_instance($fc['instance']);
        }
      }

    }

    //now let's update the vocabulary with info form the api
//    _calacademy_galaxy_update();

  }

/*
implements hook_cron()
*/

  function calacademy_galaxy_init() {

  //  _calacademy_galaxy_update();

  }
