<?php

/**
 * @file
 * Create custom tokens as referenced by the Hero System
 * @author grotter
 *
 */
define('HERO_IMAGE_TOKEN_KEY', 'hero_image_url');

/**
 * Provide information about our custom placeholder/token.
 *
 * @see httx://api.drupal.org/api/drupal/modules--system--system.api.php/function/hook_token_info/7
 * @see httx://api.lullabot.com/token_example_token_info/7
 * @return array
 *   An associative array of available tokens and token types.
 */
function calacademy_hero_token_token_info() {
    $info['tokens']['node'][HERO_IMAGE_TOKEN_KEY] = array(
        'name' => t('Hero Image URL'),
        'description' => t('as referenced by the Hero System'),
    );

    return $info;
}

/**
 * Provide replacement values for placeholder tokens.
 *
 * @see httx://api.drupal.org/api/drupal/modules--system--system.api.php/function/hook_tokens/7
 * @see httx://api.lullabot.com/token_example_tokens/7
 * @param string $type
 *   The machine-readable name of the type (group) of token being replaced, such
 *   as 'node', 'user', or another type defined by a hook_token_info()
 *   implementation.
 * @param array $tokens
 *   An array of tokens to be replaced. The keys are the machine-readable token
 *   names, and the values are the raw [type:token] strings that appeared in the
 *   original text.
 * @param array $data (optional)
 *   An associative array of data objects to be used when generating replacement
 *   values, as supplied in the $data parameter to token_replace().
 * @param array $options (optional)
 *   An associative array of options for token replacement; see token_replace()
 *   for possible values.
 * @return array
 *   An associative array of replacement values, keyed by the raw [type:token]
 *   strings from the original text.
 */
function calacademy_hero_token_tokens($type, $tokens, array $data = array(), array $options = array()) {
    $arr = array();

    // create token for terms and nodes only
    if ($type != 'term' && $type != 'node') return $arr;

    // no data
    if (empty($data[$type])) return $arr;

    $val = $data[$type];
    $imageUrl = false;

    if (isset($val->field_hero_region)) {
        $fieldValue = $val->field_hero_region['und'][0]['value'];
        $imageUrl = _calacademy_hero_token_get_image_url($fieldValue);
    } else if (isset($val->field_image_primary)) {
        // no hero region field, probably using a legacy primary image field
        $imageUrl = file_create_url($val->field_image_primary['und'][0]['uri']);
    } else {
        // no relevant field found
        return $arr;
    }

    if ($imageUrl != false) {
        $arr['[node:' . HERO_IMAGE_TOKEN_KEY . ']'] = $imageUrl;    
    }

    return $arr;
}

function _calacademy_hero_token_get_image_url($fieldValue) {
    // load an entity
    $entity = entity_load('field_collection_item', array(
        $fieldValue
    ));

    if (empty($entity)) return false;

    // figure out hero type and set appropriate values
    $fieldData = array_values($entity);
    $fieldData = $fieldData[0];
    $viewDisplay = false;

    $heroTypes = array(
        'field_image_primary' => false,
        'field_image_primary_large' => false,
        'field_hero_slideshow' => 'standard_slideshow_token',
        'field_hero_slideshow_large' => 'large_slideshow_token'
    );

    foreach ($heroTypes as $key => $value) {
        if (!empty($fieldData->{$key})) {
            // pick out data
            $field = $fieldData->{$key};

            // now we know the hero type
            $viewDisplay = $value;  
        }
    }

    // nothing found
    if (!isset($field)) return false;

    $uri = '';

    if ($viewDisplay === false) {
        // not a complex type
        $uri = $field['und'][0]['uri'];
    } else {
        // derive URL from a view
        $id = $field['und'][0]['target_id'];
        if (empty($id)) return false;
        
        // query the view
        $viewResult = views_get_view_result('hero_media', $viewDisplay, $id);
        if (empty($viewResult)) return false;

        // parse the results
        $img = $viewResult[0]->field_field_slideshow_frame_bg_image;
        $uri = $img[0]['raw']['uri'];  
    }

    if (empty($uri)) return false;
    return file_create_url($uri);
}

?>
